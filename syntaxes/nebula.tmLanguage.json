{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Nebula",
  "scopeName": "source.nebula",
  "fileTypes": [
    "neb",
    "nbl"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#methods"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.nebula",
          "match": "//.*$"
        },
        {
          "name": "comment.block.nebula",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.nebula",
          "match": "\\b(if|else|for|while|do|switch|case|default|return|throw|try|catch|finally|foreach|in)\\b"
        },
        {
          "name": "keyword.declaration.nebula",
          "match": "\\b(class|extends|namespace|native|wrapper|new|var|const|is|import|alias|get|set)\\b"
        },
        {
          "name": "keyword.other.nebula",
          "match": "\\b(this|super|global|operator|result)\\b"
        },
        {
          "name": "storage.modifier.nebula",
          "match": "\\b(public|private|static)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.nebula",
          "match": "\\b(void|bool|char|char16|char32|byte|short|int|long|float|double|int8|int16|int32|int64|uint8|uint16|uint32|uint64|ubyte|ushort|uint|ulong|string)\\b"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.float.nebula",
          "match": "\\b((\\d+\\.\\d*)|(\\d*\\.\\d+))([fFdD])?\\b"
        },
        {
          "name": "constant.numeric.integer.nebula",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.language.boolean.nebula",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.nebula",
          "match": "\\b(null)\\b"
        },
        {
          "name": "constant.character.nebula",
          "match": "'(.)'"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.compound-assignment.nebula",
          "match": "(\\+\\+|--|\\*\\*=|\\*\\*=)|(<<=|>>=|~=|&=|\\^=|\\|=)|(\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.logical.nebula",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.comparison.nebula",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.bitwise.nebula",
          "match": "<<|>>|&|\\||\\^|~"
        },
        {
          "name": "keyword.operator.arithmetic.nebula",
          "match": "(\\+\\+|--|\\*\\*|\\*|/|%|\\+|\\-)"
        },
        {
          "name": "keyword.operator.assignment.nebula",
          "match": "="
        },
        {
          "name": "keyword.operator.ternary.nebula",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.other.nebula",
          "match": "->"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.bracket.curly.nebula",
          "match": "[{}]"
        },
        {
          "name": "punctuation.bracket.parenthesis.nebula",
          "match": "[()]"
        },
        {
          "name": "punctuation.bracket.square.nebula",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.terminator.statement.nebula",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.nebula",
          "match": ","
        },
        {
          "name": "punctuation.separator.dot.nebula",
          "match": "\\."
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.interpolated.nebula",
          "begin": "(\\$)\"",
          "end": "\"",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.interpolated.begin.nebula"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.interpolated.end.nebula"
            }
          },
          "patterns": [
            {
              "name": "variable.other.interpolated.nebula",
              "begin": "\\{",
              "end": "\\}",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.interpolation.begin.nebula"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.interpolation.end.nebula"
                }
              },
              "patterns": [
                {
                  "name": "variable.parameter.nebula",
                  "match": "[a-zA-Z_][a-zA-Z0-9_]*"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.double.nebula",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.nebula",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.nebula",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.nebula",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "methods": {
      "patterns": [
        {
          "name": "entity.name.function.nebula",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "entity.name.type.class.nebula",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "identifiers": {
        "patterns": [
          {
            "name": "variable.other.nebula",
            "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
          }
        ]
    }
  }
}
